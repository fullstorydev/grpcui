// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v4.22.0
// source: test.proto

package main

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State int32

const (
	State_INVALID        State = 0
	State_INITIAL        State = 1
	State_PENDING        State = 2
	State_RUNNING        State = 3
	State_PAUSED         State = 4
	State_AWAITING_INPUT State = 5
	State_CANCELLING     State = 6
	State_COMPLETE       State = 7
	State_CANCELLED      State = 8
	State_FAILED         State = 9
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "INVALID",
		1: "INITIAL",
		2: "PENDING",
		3: "RUNNING",
		4: "PAUSED",
		5: "AWAITING_INPUT",
		6: "CANCELLING",
		7: "COMPLETE",
		8: "CANCELLED",
		9: "FAILED",
	}
	State_value = map[string]int32{
		"INVALID":        0,
		"INITIAL":        1,
		"PENDING":        2,
		"RUNNING":        3,
		"PAUSED":         4,
		"AWAITING_INPUT": 5,
		"CANCELLING":     6,
		"COMPLETE":       7,
		"CANCELLED":      8,
		"FAILED":         9,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = State(num)
	return nil
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type Void int32

const (
	Void_VOID Void = 0
)

// Enum value maps for Void.
var (
	Void_name = map[int32]string{
		0: "VOID",
	}
	Void_value = map[string]int32{
		"VOID": 0,
	}
)

func (x Void) Enum() *Void {
	p := new(Void)
	*p = x
	return p
}

func (x Void) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Void) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[1].Descriptor()
}

func (Void) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[1]
}

func (x Void) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Void) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Void(num)
	return nil
}

// Deprecated: Use Void.Descriptor instead.
func (Void) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

// basically a copy of Code from google/rpc/code.proto
type RpcStatusCode int32

const (
	// Not an error; returned on success
	//
	// HTTP Mapping: 200 OK
	RpcStatusCode_OK RpcStatusCode = 0
	// The operation was canceled, typically by the caller.
	//
	// HTTP Mapping: 499 Client Closed Request
	RpcStatusCode_CANCELED RpcStatusCode = 1
	// Unknown error.  For example, this error may be returned when
	// a `Status` value received from another address space belongs to
	// an error space that is not known in this address space.  Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	//
	// HTTP Mapping: 500 Internal Server Error
	RpcStatusCode_UNKNOWN RpcStatusCode = 2
	// The client specified an invalid argument.  Note that this differs
	// from `FAILED_PRECONDITION`.  `INVALID_ARGUMENT` indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	//
	// HTTP Mapping: 400 Bad Request
	RpcStatusCode_INVALID_ARGUMENT RpcStatusCode = 3
	// The deadline expired before the operation could complete. For operations
	// that change the state of the system, this error may be returned
	// even if the operation has completed successfully.  For example, a
	// successful response from a server could have been delayed long
	// enough for the deadline to expire.
	//
	// HTTP Mapping: 504 Gateway Timeout
	RpcStatusCode_DEADLINE_EXCEEDED RpcStatusCode = 4
	// Some requested entity (e.g., file or directory) was not found.
	//
	// Note to server developers: if a request is denied for an entire class
	// of users, such as gradual feature rollout or undocumented whitelist,
	// `NOT_FOUND` may be used. If a request is denied for some users within
	// a class of users, such as user-based access control, `PERMISSION_DENIED`
	// must be used.
	//
	// HTTP Mapping: 404 Not Found
	RpcStatusCode_NOT_FOUND RpcStatusCode = 5
	// The entity that a client attempted to create (e.g., file or directory)
	// already exists.
	//
	// HTTP Mapping: 409 Conflict
	RpcStatusCode_ALREADY_EXISTS RpcStatusCode = 6
	// The caller does not have permission to execute the specified
	// operation. `PERMISSION_DENIED` must not be used for rejections
	// caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
	// instead for those errors). `PERMISSION_DENIED` must not be
	// used if the caller can not be identified (use `UNAUTHENTICATED`
	// instead for those errors). This error code does not imply the
	// request is valid or the requested entity exists or satisfies
	// other pre-conditions.
	//
	// HTTP Mapping: 403 Forbidden
	RpcStatusCode_PERMISSION_DENIED RpcStatusCode = 7
	// The request does not have valid authentication credentials for the
	// operation.
	//
	// HTTP Mapping: 401 Unauthorized
	RpcStatusCode_UNAUTHENTICATED RpcStatusCode = 16
	// Some resource has been exhausted, perhaps a per-user quota, or
	// perhaps the entire file system is out of space.
	//
	// HTTP Mapping: 429 Too Many Requests
	RpcStatusCode_RESOURCE_EXHAUSTED RpcStatusCode = 8
	// The operation was rejected because the system is not in a state
	// required for the operation's execution.  For example, the directory
	// to be deleted is non-empty, an rmdir operation is applied to
	// a non-directory, etc.
	//
	// Service implementors can use the following guidelines to decide
	// between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`:
	//
	//	(a) Use `UNAVAILABLE` if the client can retry just the failing call.
	//	(b) Use `ABORTED` if the client should retry at a higher level
	//	    (e.g., when a client-specified test-and-set fails, indicating the
	//	    client should restart a read-modify-write sequence).
	//	(c) Use `FAILED_PRECONDITION` if the client should not retry until
	//	    the system state has been explicitly fixed.  E.g., if an "rmdir"
	//	    fails because the directory is non-empty, `FAILED_PRECONDITION`
	//	    should be returned since the client should not retry unless
	//	    the files are deleted from the directory.
	//
	// HTTP Mapping: 400 Bad Request
	RpcStatusCode_FAILED_PRECONDITION RpcStatusCode = 9
	// The operation was aborted, typically due to a concurrency issue such as
	// a sequencer check failure or transaction abort.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 409 Conflict
	RpcStatusCode_ABORTED RpcStatusCode = 10
	// The operation was attempted past the valid range.  E.g., seeking or
	// reading past end-of-file.
	//
	// Unlike `INVALID_ARGUMENT`, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate `INVALID_ARGUMENT` if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// `OUT_OF_RANGE` if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between `FAILED_PRECONDITION` and
	// `OUT_OF_RANGE`.  We recommend using `OUT_OF_RANGE` (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an `OUT_OF_RANGE` error to detect when
	// they are done.
	//
	// HTTP Mapping: 400 Bad Request
	RpcStatusCode_OUT_OF_RANGE RpcStatusCode = 11
	// The operation is not implemented or is not supported/enabled in this
	// service.
	//
	// HTTP Mapping: 501 Not Implemented
	RpcStatusCode_UNIMPLEMENTED RpcStatusCode = 12
	// Internal errors.  This means that some invariants expected by the
	// underlying system have been broken.  This error code is reserved
	// for serious errors.
	//
	// HTTP Mapping: 500 Internal Server Error
	RpcStatusCode_INTERNAL RpcStatusCode = 13
	// The service is currently unavailable.  This is most likely a
	// transient condition, which can be corrected by retrying with
	// a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See the guidelines above for deciding between `FAILED_PRECONDITION`,
	// `ABORTED`, and `UNAVAILABLE`.
	//
	// HTTP Mapping: 503 Service Unavailable
	RpcStatusCode_UNAVAILABLE RpcStatusCode = 14
	// Unrecoverable data loss or corruption.
	//
	// HTTP Mapping: 500 Internal Server Error
	RpcStatusCode_DATA_LOSS RpcStatusCode = 15
)

// Enum value maps for RpcStatusCode.
var (
	RpcStatusCode_name = map[int32]string{
		0:  "OK",
		1:  "CANCELED",
		2:  "UNKNOWN",
		3:  "INVALID_ARGUMENT",
		4:  "DEADLINE_EXCEEDED",
		5:  "NOT_FOUND",
		6:  "ALREADY_EXISTS",
		7:  "PERMISSION_DENIED",
		16: "UNAUTHENTICATED",
		8:  "RESOURCE_EXHAUSTED",
		9:  "FAILED_PRECONDITION",
		10: "ABORTED",
		11: "OUT_OF_RANGE",
		12: "UNIMPLEMENTED",
		13: "INTERNAL",
		14: "UNAVAILABLE",
		15: "DATA_LOSS",
	}
	RpcStatusCode_value = map[string]int32{
		"OK":                  0,
		"CANCELED":            1,
		"UNKNOWN":             2,
		"INVALID_ARGUMENT":    3,
		"DEADLINE_EXCEEDED":   4,
		"NOT_FOUND":           5,
		"ALREADY_EXISTS":      6,
		"PERMISSION_DENIED":   7,
		"UNAUTHENTICATED":     16,
		"RESOURCE_EXHAUSTED":  8,
		"FAILED_PRECONDITION": 9,
		"ABORTED":             10,
		"OUT_OF_RANGE":        11,
		"UNIMPLEMENTED":       12,
		"INTERNAL":            13,
		"UNAVAILABLE":         14,
		"DATA_LOSS":           15,
	}
)

func (x RpcStatusCode) Enum() *RpcStatusCode {
	p := new(RpcStatusCode)
	*p = x
	return p
}

func (x RpcStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RpcStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[2].Descriptor()
}

func (RpcStatusCode) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[2]
}

func (x RpcStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RpcStatusCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RpcStatusCode(num)
	return nil
}

// Deprecated: Use RpcStatusCode.Descriptor instead.
func (RpcStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the person
	Id *uint64 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// The person's full name
	Name *string `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	// The person's address
	Address *Address `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Xyz     *float64 `protobuf:"fixed64,4,opt,name=xyz,def=3.14159" json:"xyz,omitempty"`
	Title   *string  `protobuf:"bytes,5,opt,name=title,def=overseer" json:"title,omitempty"`
	Labels  []string `protobuf:"bytes,6,rep,name=labels" json:"labels,omitempty"`
	IsReal  *bool    `protobuf:"varint,7,opt,name=is_real,json=isReal,def=1" json:"is_real,omitempty"`
	Opaque  []byte   `protobuf:"bytes,8,opt,name=opaque,def=\\001\\002\\003\\004" json:"opaque,omitempty"`
	// Types that are assignable to Relative:
	//
	//	*Person_Parent
	//	*Person_Sibling
	//	*Person_Child
	//	*Person_None
	Relative isPerson_Relative `protobuf_oneof:"relative"`
}

// Default values for Person fields.
const (
	Default_Person_Xyz    = float64(3.14159)
	Default_Person_Title  = string("overseer")
	Default_Person_IsReal = bool(true)
)

// Default values for Person fields.
var (
	Default_Person_Opaque = []byte("\x01\x02\x03\x04")
)

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Person) GetId() uint64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Person) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Person) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Person) GetXyz() float64 {
	if x != nil && x.Xyz != nil {
		return *x.Xyz
	}
	return Default_Person_Xyz
}

func (x *Person) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return Default_Person_Title
}

func (x *Person) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Person) GetIsReal() bool {
	if x != nil && x.IsReal != nil {
		return *x.IsReal
	}
	return Default_Person_IsReal
}

func (x *Person) GetOpaque() []byte {
	if x != nil && x.Opaque != nil {
		return x.Opaque
	}
	return append([]byte(nil), Default_Person_Opaque...)
}

func (m *Person) GetRelative() isPerson_Relative {
	if m != nil {
		return m.Relative
	}
	return nil
}

func (x *Person) GetParent() *Person {
	if x, ok := x.GetRelative().(*Person_Parent); ok {
		return x.Parent
	}
	return nil
}

func (x *Person) GetSibling() *Person {
	if x, ok := x.GetRelative().(*Person_Sibling); ok {
		return x.Sibling
	}
	return nil
}

func (x *Person) GetChild() *Person {
	if x, ok := x.GetRelative().(*Person_Child); ok {
		return x.Child
	}
	return nil
}

func (x *Person) GetNone() Void {
	if x, ok := x.GetRelative().(*Person_None); ok {
		return x.None
	}
	return Void_VOID
}

type isPerson_Relative interface {
	isPerson_Relative()
}

type Person_Parent struct {
	Parent *Person `protobuf:"bytes,9,opt,name=parent,oneof"`
}

type Person_Sibling struct {
	Sibling *Person `protobuf:"bytes,10,opt,name=sibling,oneof"`
}

type Person_Child struct {
	Child *Person `protobuf:"bytes,11,opt,name=child,oneof"`
}

type Person_None struct {
	None Void `protobuf:"varint,12,opt,name=none,enum=test.Void,oneof"`
}

func (*Person_Parent) isPerson_Relative() {}

func (*Person_Sibling) isPerson_Relative() {}

func (*Person_Child) isPerson_Relative() {}

func (*Person_None) isPerson_Relative() {}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line1 *string `protobuf:"bytes,1,req,name=line1" json:"line1,omitempty"`
	Line2 *string `protobuf:"bytes,2,opt,name=line2" json:"line2,omitempty"`
	City  *string `protobuf:"bytes,3,req,name=city" json:"city,omitempty"`
	State *string `protobuf:"bytes,4,req,name=state" json:"state,omitempty"`
	Zip   *uint32 `protobuf:"varint,5,req,name=zip" json:"zip,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetLine1() string {
	if x != nil && x.Line1 != nil {
		return *x.Line1
	}
	return ""
}

func (x *Address) GetLine2() string {
	if x != nil && x.Line2 != nil {
		return *x.Line2
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *Address) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *Address) GetZip() uint32 {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return 0
}

type WellKnowns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now              *timestamppb.Timestamp    `protobuf:"bytes,1,req,name=now" json:"now,omitempty"`
	Past             *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=past" json:"past,omitempty"`
	Futures          []*timestamppb.Timestamp  `protobuf:"bytes,3,rep,name=futures" json:"futures,omitempty"`
	Period           *durationpb.Duration      `protobuf:"bytes,4,req,name=period" json:"period,omitempty"`
	NextInterval     *durationpb.Duration      `protobuf:"bytes,5,opt,name=next_interval,json=nextInterval" json:"next_interval,omitempty"`
	HistoryIntervals []*durationpb.Duration    `protobuf:"bytes,6,rep,name=history_intervals,json=historyIntervals" json:"history_intervals,omitempty"`
	Neat             *anypb.Any                `protobuf:"bytes,7,req,name=neat" json:"neat,omitempty"`
	Extra            *anypb.Any                `protobuf:"bytes,8,opt,name=extra" json:"extra,omitempty"`
	Extensions       []*anypb.Any              `protobuf:"bytes,9,rep,name=extensions" json:"extensions,omitempty"`
	Object           *structpb.Struct          `protobuf:"bytes,10,req,name=object" json:"object,omitempty"`
	OptionalObject   *structpb.Struct          `protobuf:"bytes,11,opt,name=optional_object,json=optionalObject" json:"optional_object,omitempty"`
	Objects          []*structpb.Struct        `protobuf:"bytes,12,rep,name=objects" json:"objects,omitempty"`
	Value            *structpb.Value           `protobuf:"bytes,13,req,name=value" json:"value,omitempty"`
	OptionalValue    *structpb.Value           `protobuf:"bytes,14,opt,name=optional_value,json=optionalValue" json:"optional_value,omitempty"`
	Values           []*structpb.Value         `protobuf:"bytes,15,rep,name=values" json:"values,omitempty"`
	List             *structpb.ListValue       `protobuf:"bytes,16,req,name=list" json:"list,omitempty"`
	OptionalList     *structpb.ListValue       `protobuf:"bytes,17,opt,name=optional_list,json=optionalList" json:"optional_list,omitempty"`
	Lists            []*structpb.ListValue     `protobuf:"bytes,18,rep,name=lists" json:"lists,omitempty"`
	Bytes            *wrapperspb.BytesValue    `protobuf:"bytes,19,req,name=bytes" json:"bytes,omitempty"`
	OptionalBytes    *wrapperspb.BytesValue    `protobuf:"bytes,20,opt,name=optional_bytes,json=optionalBytes" json:"optional_bytes,omitempty"`
	ListOBytes       []*wrapperspb.BytesValue  `protobuf:"bytes,21,rep,name=list_o_bytes,json=listOBytes" json:"list_o_bytes,omitempty"`
	String_          *wrapperspb.StringValue   `protobuf:"bytes,22,req,name=string" json:"string,omitempty"`
	OptionalString   *wrapperspb.StringValue   `protobuf:"bytes,23,opt,name=optional_string,json=optionalString" json:"optional_string,omitempty"`
	ListOStrings     []*wrapperspb.StringValue `protobuf:"bytes,24,rep,name=list_o_strings,json=listOStrings" json:"list_o_strings,omitempty"`
	Bool             *wrapperspb.BoolValue     `protobuf:"bytes,25,req,name=bool" json:"bool,omitempty"`
	OptionalBool     *wrapperspb.BoolValue     `protobuf:"bytes,26,opt,name=optional_bool,json=optionalBool" json:"optional_bool,omitempty"`
	ListOBools       []*wrapperspb.BoolValue   `protobuf:"bytes,27,rep,name=list_o_bools,json=listOBools" json:"list_o_bools,omitempty"`
	Double           *wrapperspb.DoubleValue   `protobuf:"bytes,28,req,name=double" json:"double,omitempty"`
	OptionalDouble   *wrapperspb.DoubleValue   `protobuf:"bytes,29,opt,name=optional_double,json=optionalDouble" json:"optional_double,omitempty"`
	ListODoubles     []*wrapperspb.DoubleValue `protobuf:"bytes,30,rep,name=list_o_doubles,json=listODoubles" json:"list_o_doubles,omitempty"`
	Float            *wrapperspb.FloatValue    `protobuf:"bytes,31,req,name=float" json:"float,omitempty"`
	OptionalFloat    *wrapperspb.FloatValue    `protobuf:"bytes,32,opt,name=optional_float,json=optionalFloat" json:"optional_float,omitempty"`
	ListOFloats      []*wrapperspb.FloatValue  `protobuf:"bytes,33,rep,name=list_o_floats,json=listOFloats" json:"list_o_floats,omitempty"`
	SmallInt         *wrapperspb.Int32Value    `protobuf:"bytes,34,req,name=small_int,json=smallInt" json:"small_int,omitempty"`
	OptionalSmallInt *wrapperspb.Int32Value    `protobuf:"bytes,35,opt,name=optional_small_int,json=optionalSmallInt" json:"optional_small_int,omitempty"`
	ListOSmallInts   []*wrapperspb.Int32Value  `protobuf:"bytes,36,rep,name=list_o_small_ints,json=listOSmallInts" json:"list_o_small_ints,omitempty"`
	BigInt           *wrapperspb.Int64Value    `protobuf:"bytes,37,req,name=big_int,json=bigInt" json:"big_int,omitempty"`
	OptionalBigInt   *wrapperspb.Int64Value    `protobuf:"bytes,38,opt,name=optional_big_int,json=optionalBigInt" json:"optional_big_int,omitempty"`
	ListOBigInts     []*wrapperspb.Int64Value  `protobuf:"bytes,39,rep,name=list_o_big_ints,json=listOBigInts" json:"list_o_big_ints,omitempty"`
	SmallId          *wrapperspb.UInt32Value   `protobuf:"bytes,40,req,name=small_id,json=smallId" json:"small_id,omitempty"`
	OptionalSmallId  *wrapperspb.UInt32Value   `protobuf:"bytes,41,opt,name=optional_small_id,json=optionalSmallId" json:"optional_small_id,omitempty"`
	ListOSmallIds    []*wrapperspb.UInt32Value `protobuf:"bytes,42,rep,name=list_o_small_ids,json=listOSmallIds" json:"list_o_small_ids,omitempty"`
	BigId            *wrapperspb.UInt64Value   `protobuf:"bytes,43,req,name=big_id,json=bigId" json:"big_id,omitempty"`
	OptionalBigId    *wrapperspb.UInt64Value   `protobuf:"bytes,44,opt,name=optional_big_id,json=optionalBigId" json:"optional_big_id,omitempty"`
	ListOBigIds      []*wrapperspb.UInt64Value `protobuf:"bytes,45,rep,name=list_o_big_ids,json=listOBigIds" json:"list_o_big_ids,omitempty"`
}

func (x *WellKnowns) Reset() {
	*x = WellKnowns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnowns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnowns) ProtoMessage() {}

func (x *WellKnowns) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnowns.ProtoReflect.Descriptor instead.
func (*WellKnowns) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{2}
}

func (x *WellKnowns) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *WellKnowns) GetPast() *timestamppb.Timestamp {
	if x != nil {
		return x.Past
	}
	return nil
}

func (x *WellKnowns) GetFutures() []*timestamppb.Timestamp {
	if x != nil {
		return x.Futures
	}
	return nil
}

func (x *WellKnowns) GetPeriod() *durationpb.Duration {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *WellKnowns) GetNextInterval() *durationpb.Duration {
	if x != nil {
		return x.NextInterval
	}
	return nil
}

func (x *WellKnowns) GetHistoryIntervals() []*durationpb.Duration {
	if x != nil {
		return x.HistoryIntervals
	}
	return nil
}

func (x *WellKnowns) GetNeat() *anypb.Any {
	if x != nil {
		return x.Neat
	}
	return nil
}

func (x *WellKnowns) GetExtra() *anypb.Any {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *WellKnowns) GetExtensions() []*anypb.Any {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *WellKnowns) GetObject() *structpb.Struct {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *WellKnowns) GetOptionalObject() *structpb.Struct {
	if x != nil {
		return x.OptionalObject
	}
	return nil
}

func (x *WellKnowns) GetObjects() []*structpb.Struct {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *WellKnowns) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WellKnowns) GetOptionalValue() *structpb.Value {
	if x != nil {
		return x.OptionalValue
	}
	return nil
}

func (x *WellKnowns) GetValues() []*structpb.Value {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *WellKnowns) GetList() *structpb.ListValue {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WellKnowns) GetOptionalList() *structpb.ListValue {
	if x != nil {
		return x.OptionalList
	}
	return nil
}

func (x *WellKnowns) GetLists() []*structpb.ListValue {
	if x != nil {
		return x.Lists
	}
	return nil
}

func (x *WellKnowns) GetBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *WellKnowns) GetOptionalBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.OptionalBytes
	}
	return nil
}

func (x *WellKnowns) GetListOBytes() []*wrapperspb.BytesValue {
	if x != nil {
		return x.ListOBytes
	}
	return nil
}

func (x *WellKnowns) GetString_() *wrapperspb.StringValue {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *WellKnowns) GetOptionalString() *wrapperspb.StringValue {
	if x != nil {
		return x.OptionalString
	}
	return nil
}

func (x *WellKnowns) GetListOStrings() []*wrapperspb.StringValue {
	if x != nil {
		return x.ListOStrings
	}
	return nil
}

func (x *WellKnowns) GetBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.Bool
	}
	return nil
}

func (x *WellKnowns) GetOptionalBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.OptionalBool
	}
	return nil
}

func (x *WellKnowns) GetListOBools() []*wrapperspb.BoolValue {
	if x != nil {
		return x.ListOBools
	}
	return nil
}

func (x *WellKnowns) GetDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Double
	}
	return nil
}

func (x *WellKnowns) GetOptionalDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.OptionalDouble
	}
	return nil
}

func (x *WellKnowns) GetListODoubles() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.ListODoubles
	}
	return nil
}

func (x *WellKnowns) GetFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.Float
	}
	return nil
}

func (x *WellKnowns) GetOptionalFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.OptionalFloat
	}
	return nil
}

func (x *WellKnowns) GetListOFloats() []*wrapperspb.FloatValue {
	if x != nil {
		return x.ListOFloats
	}
	return nil
}

func (x *WellKnowns) GetSmallInt() *wrapperspb.Int32Value {
	if x != nil {
		return x.SmallInt
	}
	return nil
}

func (x *WellKnowns) GetOptionalSmallInt() *wrapperspb.Int32Value {
	if x != nil {
		return x.OptionalSmallInt
	}
	return nil
}

func (x *WellKnowns) GetListOSmallInts() []*wrapperspb.Int32Value {
	if x != nil {
		return x.ListOSmallInts
	}
	return nil
}

func (x *WellKnowns) GetBigInt() *wrapperspb.Int64Value {
	if x != nil {
		return x.BigInt
	}
	return nil
}

func (x *WellKnowns) GetOptionalBigInt() *wrapperspb.Int64Value {
	if x != nil {
		return x.OptionalBigInt
	}
	return nil
}

func (x *WellKnowns) GetListOBigInts() []*wrapperspb.Int64Value {
	if x != nil {
		return x.ListOBigInts
	}
	return nil
}

func (x *WellKnowns) GetSmallId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.SmallId
	}
	return nil
}

func (x *WellKnowns) GetOptionalSmallId() *wrapperspb.UInt32Value {
	if x != nil {
		return x.OptionalSmallId
	}
	return nil
}

func (x *WellKnowns) GetListOSmallIds() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.ListOSmallIds
	}
	return nil
}

func (x *WellKnowns) GetBigId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BigId
	}
	return nil
}

func (x *WellKnowns) GetOptionalBigId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.OptionalBigId
	}
	return nil
}

func (x *WellKnowns) GetListOBigIds() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.ListOBigIds
	}
	return nil
}

type NumbersNumbersNumbers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usually_1    *int32  `protobuf:"varint,1,opt,name=usually_1,json=usually1,def=1" json:"usually_1,omitempty"`
	SomeNum_1    *int32  `protobuf:"varint,2,opt,name=some_num_1,json=someNum1" json:"some_num_1,omitempty"`
	NeededNum_1  *int32  `protobuf:"varint,3,req,name=needed_num_1,json=neededNum1" json:"needed_num_1,omitempty"`
	Usually_2    *int64  `protobuf:"varint,4,opt,name=usually_2,json=usually2,def=2" json:"usually_2,omitempty"`
	SomeNum_2    *int64  `protobuf:"varint,5,opt,name=some_num_2,json=someNum2" json:"some_num_2,omitempty"`
	NeededNum_2  *int64  `protobuf:"varint,6,req,name=needed_num_2,json=neededNum2" json:"needed_num_2,omitempty"`
	Usually_3    *uint32 `protobuf:"varint,7,opt,name=usually_3,json=usually3,def=3" json:"usually_3,omitempty"`
	SomeNum_3    *uint32 `protobuf:"varint,8,opt,name=some_num_3,json=someNum3" json:"some_num_3,omitempty"`
	NeededNum_3  *uint32 `protobuf:"varint,9,req,name=needed_num_3,json=neededNum3" json:"needed_num_3,omitempty"`
	Usually_4    *uint64 `protobuf:"varint,10,opt,name=usually_4,json=usually4,def=4" json:"usually_4,omitempty"`
	SomeNum_4    *uint64 `protobuf:"varint,11,opt,name=some_num_4,json=someNum4" json:"some_num_4,omitempty"`
	NeededNum_4  *uint64 `protobuf:"varint,12,req,name=needed_num_4,json=neededNum4" json:"needed_num_4,omitempty"`
	Usually_5    *int32  `protobuf:"zigzag32,13,opt,name=usually_5,json=usually5,def=5" json:"usually_5,omitempty"`
	SomeNum_5    *int32  `protobuf:"zigzag32,14,opt,name=some_num_5,json=someNum5" json:"some_num_5,omitempty"`
	NeededNum_5  *int32  `protobuf:"zigzag32,15,req,name=needed_num_5,json=neededNum5" json:"needed_num_5,omitempty"`
	Usually_6    *int64  `protobuf:"zigzag64,16,opt,name=usually_6,json=usually6,def=6" json:"usually_6,omitempty"`
	SomeNum_6    *int64  `protobuf:"zigzag64,17,opt,name=some_num_6,json=someNum6" json:"some_num_6,omitempty"`
	NeededNum_6  *int64  `protobuf:"zigzag64,18,req,name=needed_num_6,json=neededNum6" json:"needed_num_6,omitempty"`
	Usually_7    *uint32 `protobuf:"fixed32,19,opt,name=usually_7,json=usually7,def=7" json:"usually_7,omitempty"`
	SomeNum_7    *uint32 `protobuf:"fixed32,20,opt,name=some_num_7,json=someNum7" json:"some_num_7,omitempty"`
	NeededNum_7  *uint32 `protobuf:"fixed32,21,req,name=needed_num_7,json=neededNum7" json:"needed_num_7,omitempty"`
	Usually_8    *uint64 `protobuf:"fixed64,22,opt,name=usually_8,json=usually8,def=8" json:"usually_8,omitempty"`
	SomeNum_8    *uint64 `protobuf:"fixed64,23,opt,name=some_num_8,json=someNum8" json:"some_num_8,omitempty"`
	NeededNum_8  *uint64 `protobuf:"fixed64,24,req,name=needed_num_8,json=neededNum8" json:"needed_num_8,omitempty"`
	Usually_9    *int32  `protobuf:"fixed32,25,opt,name=usually_9,json=usually9,def=9" json:"usually_9,omitempty"`
	SomeNum_9    *int32  `protobuf:"fixed32,26,opt,name=some_num_9,json=someNum9" json:"some_num_9,omitempty"`
	NeededNum_9  *int32  `protobuf:"fixed32,27,req,name=needed_num_9,json=neededNum9" json:"needed_num_9,omitempty"`
	Usually_10   *int64  `protobuf:"fixed64,28,opt,name=usually_10,json=usually10,def=10" json:"usually_10,omitempty"`
	SomeNum_10   *int64  `protobuf:"fixed64,29,opt,name=some_num_10,json=someNum10" json:"some_num_10,omitempty"`
	NeededNum_10 *int64  `protobuf:"fixed64,30,req,name=needed_num_10,json=neededNum10" json:"needed_num_10,omitempty"`
}

// Default values for NumbersNumbersNumbers fields.
const (
	Default_NumbersNumbersNumbers_Usually_1  = int32(1)
	Default_NumbersNumbersNumbers_Usually_2  = int64(2)
	Default_NumbersNumbersNumbers_Usually_3  = uint32(3)
	Default_NumbersNumbersNumbers_Usually_4  = uint64(4)
	Default_NumbersNumbersNumbers_Usually_5  = int32(5)
	Default_NumbersNumbersNumbers_Usually_6  = int64(6)
	Default_NumbersNumbersNumbers_Usually_7  = uint32(7)
	Default_NumbersNumbersNumbers_Usually_8  = uint64(8)
	Default_NumbersNumbersNumbers_Usually_9  = int32(9)
	Default_NumbersNumbersNumbers_Usually_10 = int64(10)
)

func (x *NumbersNumbersNumbers) Reset() {
	*x = NumbersNumbersNumbers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumbersNumbersNumbers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumbersNumbersNumbers) ProtoMessage() {}

func (x *NumbersNumbersNumbers) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumbersNumbersNumbers.ProtoReflect.Descriptor instead.
func (*NumbersNumbersNumbers) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{3}
}

func (x *NumbersNumbersNumbers) GetUsually_1() int32 {
	if x != nil && x.Usually_1 != nil {
		return *x.Usually_1
	}
	return Default_NumbersNumbersNumbers_Usually_1
}

func (x *NumbersNumbersNumbers) GetSomeNum_1() int32 {
	if x != nil && x.SomeNum_1 != nil {
		return *x.SomeNum_1
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_1() int32 {
	if x != nil && x.NeededNum_1 != nil {
		return *x.NeededNum_1
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_2() int64 {
	if x != nil && x.Usually_2 != nil {
		return *x.Usually_2
	}
	return Default_NumbersNumbersNumbers_Usually_2
}

func (x *NumbersNumbersNumbers) GetSomeNum_2() int64 {
	if x != nil && x.SomeNum_2 != nil {
		return *x.SomeNum_2
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_2() int64 {
	if x != nil && x.NeededNum_2 != nil {
		return *x.NeededNum_2
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_3() uint32 {
	if x != nil && x.Usually_3 != nil {
		return *x.Usually_3
	}
	return Default_NumbersNumbersNumbers_Usually_3
}

func (x *NumbersNumbersNumbers) GetSomeNum_3() uint32 {
	if x != nil && x.SomeNum_3 != nil {
		return *x.SomeNum_3
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_3() uint32 {
	if x != nil && x.NeededNum_3 != nil {
		return *x.NeededNum_3
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_4() uint64 {
	if x != nil && x.Usually_4 != nil {
		return *x.Usually_4
	}
	return Default_NumbersNumbersNumbers_Usually_4
}

func (x *NumbersNumbersNumbers) GetSomeNum_4() uint64 {
	if x != nil && x.SomeNum_4 != nil {
		return *x.SomeNum_4
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_4() uint64 {
	if x != nil && x.NeededNum_4 != nil {
		return *x.NeededNum_4
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_5() int32 {
	if x != nil && x.Usually_5 != nil {
		return *x.Usually_5
	}
	return Default_NumbersNumbersNumbers_Usually_5
}

func (x *NumbersNumbersNumbers) GetSomeNum_5() int32 {
	if x != nil && x.SomeNum_5 != nil {
		return *x.SomeNum_5
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_5() int32 {
	if x != nil && x.NeededNum_5 != nil {
		return *x.NeededNum_5
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_6() int64 {
	if x != nil && x.Usually_6 != nil {
		return *x.Usually_6
	}
	return Default_NumbersNumbersNumbers_Usually_6
}

func (x *NumbersNumbersNumbers) GetSomeNum_6() int64 {
	if x != nil && x.SomeNum_6 != nil {
		return *x.SomeNum_6
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_6() int64 {
	if x != nil && x.NeededNum_6 != nil {
		return *x.NeededNum_6
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_7() uint32 {
	if x != nil && x.Usually_7 != nil {
		return *x.Usually_7
	}
	return Default_NumbersNumbersNumbers_Usually_7
}

func (x *NumbersNumbersNumbers) GetSomeNum_7() uint32 {
	if x != nil && x.SomeNum_7 != nil {
		return *x.SomeNum_7
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_7() uint32 {
	if x != nil && x.NeededNum_7 != nil {
		return *x.NeededNum_7
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_8() uint64 {
	if x != nil && x.Usually_8 != nil {
		return *x.Usually_8
	}
	return Default_NumbersNumbersNumbers_Usually_8
}

func (x *NumbersNumbersNumbers) GetSomeNum_8() uint64 {
	if x != nil && x.SomeNum_8 != nil {
		return *x.SomeNum_8
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_8() uint64 {
	if x != nil && x.NeededNum_8 != nil {
		return *x.NeededNum_8
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_9() int32 {
	if x != nil && x.Usually_9 != nil {
		return *x.Usually_9
	}
	return Default_NumbersNumbersNumbers_Usually_9
}

func (x *NumbersNumbersNumbers) GetSomeNum_9() int32 {
	if x != nil && x.SomeNum_9 != nil {
		return *x.SomeNum_9
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_9() int32 {
	if x != nil && x.NeededNum_9 != nil {
		return *x.NeededNum_9
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetUsually_10() int64 {
	if x != nil && x.Usually_10 != nil {
		return *x.Usually_10
	}
	return Default_NumbersNumbersNumbers_Usually_10
}

func (x *NumbersNumbersNumbers) GetSomeNum_10() int64 {
	if x != nil && x.SomeNum_10 != nil {
		return *x.SomeNum_10
	}
	return 0
}

func (x *NumbersNumbersNumbers) GetNeededNum_10() int64 {
	if x != nil && x.NeededNum_10 != nil {
		return *x.NeededNum_10
	}
	return 0
}

type Arrays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names       []string  `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
	Data        [][]byte  `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
	Relatives   []*Person `protobuf:"bytes,3,rep,name=relatives" json:"relatives,omitempty"`
	OtherStates []State   `protobuf:"varint,14,rep,name=other_states,json=otherStates,enum=test.State" json:"other_states,omitempty"`
}

func (x *Arrays) Reset() {
	*x = Arrays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Arrays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Arrays) ProtoMessage() {}

func (x *Arrays) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Arrays.ProtoReflect.Descriptor instead.
func (*Arrays) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{4}
}

func (x *Arrays) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Arrays) GetData() [][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Arrays) GetRelatives() []*Person {
	if x != nil {
		return x.Relatives
	}
	return nil
}

func (x *Arrays) GetOtherStates() []State {
	if x != nil {
		return x.OtherStates
	}
	return nil
}

type Maps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringSet           map[string]Void           `protobuf:"bytes,1,rep,name=string_set,json=stringSet" json:"string_set,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Int32Set            map[int32]Void            `protobuf:"bytes,2,rep,name=int32_set,json=int32Set" json:"int32_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Int64Set            map[int64]Void            `protobuf:"bytes,3,rep,name=int64_set,json=int64Set" json:"int64_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Uint32Set           map[uint32]Void           `protobuf:"bytes,4,rep,name=uint32_set,json=uint32Set" json:"uint32_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Uint64Set           map[uint64]Void           `protobuf:"bytes,5,rep,name=uint64_set,json=uint64Set" json:"uint64_set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Sint32Set           map[int32]Void            `protobuf:"bytes,6,rep,name=sint32_set,json=sint32Set" json:"sint32_set,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Sint64Set           map[int64]Void            `protobuf:"bytes,7,rep,name=sint64_set,json=sint64Set" json:"sint64_set,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.Void"`
	Fixed32Set          map[uint32]*emptypb.Empty `protobuf:"bytes,8,rep,name=fixed32_set,json=fixed32Set" json:"fixed32_set,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed64Set          map[uint64]*emptypb.Empty `protobuf:"bytes,9,rep,name=fixed64_set,json=fixed64Set" json:"fixed64_set,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed32Set         map[int32]*emptypb.Empty  `protobuf:"bytes,10,rep,name=sfixed32_set,json=sfixed32Set" json:"sfixed32_set,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed64Set         map[int64]*emptypb.Empty  `protobuf:"bytes,11,rep,name=sfixed64_set,json=sfixed64Set" json:"sfixed64_set,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PeopleByEmployeeNum map[int32]*Person         `protobuf:"bytes,12,rep,name=people_by_employee_num,json=peopleByEmployeeNum" json:"people_by_employee_num,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	States              map[int32]State           `protobuf:"bytes,13,rep,name=states" json:"states,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=test.State"`
	StringNames         map[string]string         `protobuf:"bytes,14,rep,name=string_names,json=stringNames" json:"string_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BytesNames          map[string][]byte         `protobuf:"bytes,15,rep,name=bytes_names,json=bytesNames" json:"bytes_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolNames           map[string]bool           `protobuf:"bytes,16,rep,name=bool_names,json=boolNames" json:"bool_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DoubleNames         map[string]float64        `protobuf:"bytes,17,rep,name=double_names,json=doubleNames" json:"double_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	FloatNames          map[string]float32        `protobuf:"bytes,18,rep,name=float_names,json=floatNames" json:"float_names,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
}

func (x *Maps) Reset() {
	*x = Maps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Maps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Maps) ProtoMessage() {}

func (x *Maps) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Maps.ProtoReflect.Descriptor instead.
func (*Maps) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{5}
}

func (x *Maps) GetStringSet() map[string]Void {
	if x != nil {
		return x.StringSet
	}
	return nil
}

func (x *Maps) GetInt32Set() map[int32]Void {
	if x != nil {
		return x.Int32Set
	}
	return nil
}

func (x *Maps) GetInt64Set() map[int64]Void {
	if x != nil {
		return x.Int64Set
	}
	return nil
}

func (x *Maps) GetUint32Set() map[uint32]Void {
	if x != nil {
		return x.Uint32Set
	}
	return nil
}

func (x *Maps) GetUint64Set() map[uint64]Void {
	if x != nil {
		return x.Uint64Set
	}
	return nil
}

func (x *Maps) GetSint32Set() map[int32]Void {
	if x != nil {
		return x.Sint32Set
	}
	return nil
}

func (x *Maps) GetSint64Set() map[int64]Void {
	if x != nil {
		return x.Sint64Set
	}
	return nil
}

func (x *Maps) GetFixed32Set() map[uint32]*emptypb.Empty {
	if x != nil {
		return x.Fixed32Set
	}
	return nil
}

func (x *Maps) GetFixed64Set() map[uint64]*emptypb.Empty {
	if x != nil {
		return x.Fixed64Set
	}
	return nil
}

func (x *Maps) GetSfixed32Set() map[int32]*emptypb.Empty {
	if x != nil {
		return x.Sfixed32Set
	}
	return nil
}

func (x *Maps) GetSfixed64Set() map[int64]*emptypb.Empty {
	if x != nil {
		return x.Sfixed64Set
	}
	return nil
}

func (x *Maps) GetPeopleByEmployeeNum() map[int32]*Person {
	if x != nil {
		return x.PeopleByEmployeeNum
	}
	return nil
}

func (x *Maps) GetStates() map[int32]State {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *Maps) GetStringNames() map[string]string {
	if x != nil {
		return x.StringNames
	}
	return nil
}

func (x *Maps) GetBytesNames() map[string][]byte {
	if x != nil {
		return x.BytesNames
	}
	return nil
}

func (x *Maps) GetBoolNames() map[string]bool {
	if x != nil {
		return x.BoolNames
	}
	return nil
}

func (x *Maps) GetDoubleNames() map[string]float64 {
	if x != nil {
		return x.DoubleNames
	}
	return nil
}

func (x *Maps) GetFloatNames() map[string]float32 {
	if x != nil {
		return x.FloatNames
	}
	return nil
}

type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// To recurse or not to recurse
	Recurse *TestMessage `protobuf:"bytes,2,opt,name=recurse" json:"recurse,omitempty"`
	// It's even possible to do this repeatedly!
	RepeatedRecurse []*TestMessage         `protobuf:"bytes,3,rep,name=repeated_recurse,json=repeatedRecurse" json:"repeated_recurse,omitempty"`
	Person          *Person                `protobuf:"bytes,4,req,name=person" json:"person,omitempty"`
	State           *State                 `protobuf:"varint,5,req,name=state,enum=test.State" json:"state,omitempty"`
	Numbers         *NumbersNumbersNumbers `protobuf:"bytes,6,opt,name=numbers" json:"numbers,omitempty"`
	Usually_4242    *float32               `protobuf:"fixed32,7,opt,name=usually_4242,json=usually4242,def=4242" json:"usually_4242,omitempty"`
	SomeNumA        *float32               `protobuf:"fixed32,8,opt,name=some_num_a,json=someNumA" json:"some_num_a,omitempty"`
	NeededNumA      *float32               `protobuf:"fixed32,9,req,name=needed_num_a,json=neededNumA" json:"needed_num_a,omitempty"`
	Usually_9999    *float64               `protobuf:"fixed64,10,opt,name=usually_9999,json=usually9999,def=9999" json:"usually_9999,omitempty"`
	SomeNumB        *float64               `protobuf:"fixed64,11,opt,name=some_num_b,json=someNumB" json:"some_num_b,omitempty"`
	NeededNumB      *float64               `protobuf:"fixed64,12,req,name=needed_num_b,json=neededNumB" json:"needed_num_b,omitempty"`
	NextState       *State                 `protobuf:"varint,13,opt,name=next_state,json=nextState,enum=test.State,def=2" json:"next_state,omitempty"`
	Base64Stuff     []byte                 `protobuf:"bytes,14,opt,name=base64_stuff,json=base64Stuff" json:"base64_stuff,omitempty"`
	OpaqueId        []byte                 `protobuf:"bytes,15,req,name=opaque_id,json=opaqueId" json:"opaque_id,omitempty"`
	Wk              *WellKnowns            `protobuf:"bytes,16,opt,name=wk" json:"wk,omitempty"`
	Arrays          *Arrays                `protobuf:"bytes,17,opt,name=arrays" json:"arrays,omitempty"`
	Maps            *Maps                  `protobuf:"bytes,18,opt,name=maps" json:"maps,omitempty"`
	Misc            *TestMessage_Misc      `protobuf:"group,19,opt,name=Misc,json=misc" json:"misc,omitempty"`
}

// Default values for TestMessage fields.
const (
	Default_TestMessage_Usually_4242 = float32(4242)
	Default_TestMessage_Usually_9999 = float64(9999)
	Default_TestMessage_NextState    = State_PENDING
)

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{6}
}

func (x *TestMessage) GetRecurse() *TestMessage {
	if x != nil {
		return x.Recurse
	}
	return nil
}

func (x *TestMessage) GetRepeatedRecurse() []*TestMessage {
	if x != nil {
		return x.RepeatedRecurse
	}
	return nil
}

func (x *TestMessage) GetPerson() *Person {
	if x != nil {
		return x.Person
	}
	return nil
}

func (x *TestMessage) GetState() State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return State_INVALID
}

func (x *TestMessage) GetNumbers() *NumbersNumbersNumbers {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *TestMessage) GetUsually_4242() float32 {
	if x != nil && x.Usually_4242 != nil {
		return *x.Usually_4242
	}
	return Default_TestMessage_Usually_4242
}

func (x *TestMessage) GetSomeNumA() float32 {
	if x != nil && x.SomeNumA != nil {
		return *x.SomeNumA
	}
	return 0
}

func (x *TestMessage) GetNeededNumA() float32 {
	if x != nil && x.NeededNumA != nil {
		return *x.NeededNumA
	}
	return 0
}

func (x *TestMessage) GetUsually_9999() float64 {
	if x != nil && x.Usually_9999 != nil {
		return *x.Usually_9999
	}
	return Default_TestMessage_Usually_9999
}

func (x *TestMessage) GetSomeNumB() float64 {
	if x != nil && x.SomeNumB != nil {
		return *x.SomeNumB
	}
	return 0
}

func (x *TestMessage) GetNeededNumB() float64 {
	if x != nil && x.NeededNumB != nil {
		return *x.NeededNumB
	}
	return 0
}

func (x *TestMessage) GetNextState() State {
	if x != nil && x.NextState != nil {
		return *x.NextState
	}
	return Default_TestMessage_NextState
}

func (x *TestMessage) GetBase64Stuff() []byte {
	if x != nil {
		return x.Base64Stuff
	}
	return nil
}

func (x *TestMessage) GetOpaqueId() []byte {
	if x != nil {
		return x.OpaqueId
	}
	return nil
}

func (x *TestMessage) GetWk() *WellKnowns {
	if x != nil {
		return x.Wk
	}
	return nil
}

func (x *TestMessage) GetArrays() *Arrays {
	if x != nil {
		return x.Arrays
	}
	return nil
}

func (x *TestMessage) GetMaps() *Maps {
	if x != nil {
		return x.Maps
	}
	return nil
}

func (x *TestMessage) GetMisc() *TestMessage_Misc {
	if x != nil {
		return x.Misc
	}
	return nil
}

type FailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumResponses *int32 `protobuf:"varint,1,opt,name=num_responses,json=numResponses" json:"num_responses,omitempty"`
	// basically a copy of Status from google/rpc/status.proto
	Code    *RpcStatusCode `protobuf:"varint,2,opt,name=code,enum=test.RpcStatusCode" json:"code,omitempty"`
	Message *string        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Details []*anypb.Any   `protobuf:"bytes,4,rep,name=details" json:"details,omitempty"`
}

func (x *FailRequest) Reset() {
	*x = FailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailRequest) ProtoMessage() {}

func (x *FailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailRequest.ProtoReflect.Descriptor instead.
func (*FailRequest) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{7}
}

func (x *FailRequest) GetNumResponses() int32 {
	if x != nil && x.NumResponses != nil {
		return *x.NumResponses
	}
	return 0
}

func (x *FailRequest) GetCode() RpcStatusCode {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return RpcStatusCode_OK
}

func (x *FailRequest) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *FailRequest) GetDetails() []*anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

type TestMessage_Misc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foo *string `protobuf:"bytes,1,opt,name=foo" json:"foo,omitempty"`
	Bar *int32  `protobuf:"varint,2,opt,name=bar" json:"bar,omitempty"`
}

func (x *TestMessage_Misc) Reset() {
	*x = TestMessage_Misc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage_Misc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_Misc) ProtoMessage() {}

func (x *TestMessage_Misc) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage_Misc.ProtoReflect.Descriptor instead.
func (*TestMessage_Misc) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TestMessage_Misc) GetFoo() string {
	if x != nil && x.Foo != nil {
		return *x.Foo
	}
	return ""
}

func (x *TestMessage_Misc) GetBar() int32 {
	if x != nil && x.Bar != nil {
		return *x.Bar
	}
	return 0
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x03, 0x0a, 0x06, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x19, 0x0a, 0x03, 0x78, 0x79, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x07,
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x52, 0x03, 0x78, 0x79, 0x7a, 0x12, 0x1e, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x65, 0x72, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x52,
	0x65, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x3a, 0x10, 0x5c, 0x30, 0x30, 0x31, 0x5c, 0x30, 0x30, 0x32, 0x5c, 0x30, 0x30,
	0x33, 0x5c, 0x30, 0x30, 0x34, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x22, 0x71, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x05, 0x20, 0x02, 0x28,
	0x0d, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x22, 0x82, 0x15, 0x0a, 0x0a, 0x57, 0x65, 0x6c, 0x6c, 0x4b,
	0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03,
	0x6e, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x70,
	0x61, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x11,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6e, 0x65, 0x61, 0x74, 0x12, 0x2a,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x40, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6f, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x3f, 0x0a,
	0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x3c,
	0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x1b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x42, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x06,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x1f, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x42, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x22, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x12,
	0x49, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6f, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x74, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x25, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x62, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x12,
	0x42, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x4f, 0x42, 0x69, 0x67, 0x49,
	0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x28, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f,
	0x5f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x6c, 0x69, 0x73, 0x74, 0x4f, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x06, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x62, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x42, 0x69, 0x67, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x6f, 0x5f, 0x62, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x6c, 0x69, 0x73, 0x74, 0x4f, 0x42, 0x69, 0x67, 0x49, 0x64, 0x73, 0x22, 0xde, 0x07, 0x0a, 0x15,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x31, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x32, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x32, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x32, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x32, 0x18, 0x06, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x33, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x33, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x33, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x33, 0x18, 0x09, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x33, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x34, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x34, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x34, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x34, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x34, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x35, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x01, 0x35, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x35, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x35, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x35, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x35, 0x18, 0x0f, 0x20, 0x02, 0x28, 0x11, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x35, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x12, 0x3a, 0x01, 0x36, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x36, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x36, 0x18, 0x11, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x36, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x36, 0x18, 0x12, 0x20, 0x02, 0x28, 0x12, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x36, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x37, 0x18, 0x13, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x01, 0x37, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x37, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x37, 0x18, 0x14, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x37, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x37, 0x18, 0x15, 0x20, 0x02, 0x28, 0x07, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x37, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x38, 0x18, 0x16, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x01, 0x38, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x38, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x38, 0x18, 0x17, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x38, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x38, 0x18, 0x18, 0x20, 0x02, 0x28, 0x06, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x38, 0x12, 0x1e, 0x0a, 0x09, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x39, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0f, 0x3a, 0x01, 0x39, 0x52, 0x08, 0x75, 0x73, 0x75,
	0x61, 0x6c, 0x6c, 0x79, 0x39, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x39, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x39, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x39, 0x18, 0x1b, 0x20, 0x02, 0x28, 0x0f, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x4e, 0x75, 0x6d, 0x39, 0x12, 0x21, 0x0a, 0x0a, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x31, 0x30, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x10, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x09, 0x75,
	0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x31, 0x30, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x6d, 0x65,
	0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x30, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x73,
	0x6f, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x31, 0x30, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x30, 0x18, 0x1e, 0x20, 0x02, 0x28, 0x10, 0x52,
	0x0b, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x31, 0x30, 0x22, 0x8e, 0x01, 0x0a,
	0x06, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x2a, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0x8a, 0x13,
	0x0a, 0x04, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74,
	0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x12, 0x38,
	0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x65, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x0a,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53,
	0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x65, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x65, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x53, 0x65, 0x74,
	0x12, 0x58, 0x0a, 0x16, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x48,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x47, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x65,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48,
	0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x0e, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x65, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x0f, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x56, 0x0a, 0x10, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x10, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x54, 0x0a, 0x18, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x46, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x42, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xff, 0x05, 0x0a, 0x0b, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79,
	0x5f, 0x34, 0x32, 0x34, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x04, 0x34, 0x32, 0x34,
	0x32, 0x52, 0x0b, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x34, 0x32, 0x34, 0x32, 0x12, 0x1c,
	0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x41, 0x12, 0x20, 0x0a, 0x0c,
	0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x61, 0x18, 0x09, 0x20, 0x02,
	0x28, 0x02, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x41, 0x12, 0x27,
	0x0a, 0x0c, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x39, 0x39, 0x39, 0x39, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x3a, 0x04, 0x39, 0x39, 0x39, 0x39, 0x52, 0x0b, 0x75, 0x73, 0x75, 0x61,
	0x6c, 0x6c, 0x79, 0x39, 0x39, 0x39, 0x39, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x6f, 0x6d, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x6d,
	0x65, 0x4e, 0x75, 0x6d, 0x42, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x18, 0x0c, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x42, 0x12, 0x33, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x75, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x53, 0x74, 0x75, 0x66, 0x66, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x08, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x02,
	0x77, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x73, 0x52, 0x02, 0x77, 0x6b, 0x12, 0x24,
	0x0a, 0x06, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x52, 0x06, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x04,
	0x6d, 0x61, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0a, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x63,
	0x1a, 0x2a, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x61, 0x72, 0x22, 0xa5, 0x01, 0x0a,
	0x0b, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2a, 0x94, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x2a, 0x10, 0x0a, 0x04, 0x56,
	0x6f, 0x69, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x49, 0x44, 0x10, 0x00, 0x2a, 0xbf, 0x02,
	0x0a, 0x0d, 0x52, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52,
	0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x41, 0x44,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10, 0x10, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x0d, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e,
	0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c, 0x4f, 0x53, 0x53, 0x10, 0x0f, 0x32,
	0x99, 0x13, 0x0a, 0x0b, 0x4b, 0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x53, 0x69, 0x6e, 0x6b, 0x12,
	0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x61, 0x6e, 0x79, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x12,
	0x36, 0x0a, 0x0c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x6e, 0x79, 0x12,
	0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x0c, 0x44, 0x6f, 0x4d, 0x61, 0x6e,
	0x79, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x2e, 0x0a, 0x04, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x11, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30,
	0x01, 0x12, 0x43, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x53, 0x65, 0x6e,
	0x64, 0x41, 0x6e, 0x79, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43,
	0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x65, 0x6e,
	0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a,
	0x09, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x40, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x15, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4b, 0x0a, 0x14, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x41, 0x6e, 0x79, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x47, 0x0a, 0x12, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x01, 0x12, 0x45, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4d, 0x0a, 0x15, 0x53, 0x65,
	0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4c, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4c, 0x0a,
	0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x53,
	0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12,
	0x4c, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x4c, 0x0a,
	0x12, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x42, 0x08, 0x5a, 0x06, 0x2e,
	0x3b, 0x6d, 0x61, 0x69, 0x6e,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_test_proto_goTypes = []interface{}{
	(State)(0),                     // 0: test.State
	(Void)(0),                      // 1: test.Void
	(RpcStatusCode)(0),             // 2: test.RpcStatusCode
	(*Person)(nil),                 // 3: test.Person
	(*Address)(nil),                // 4: test.Address
	(*WellKnowns)(nil),             // 5: test.WellKnowns
	(*NumbersNumbersNumbers)(nil),  // 6: test.NumbersNumbersNumbers
	(*Arrays)(nil),                 // 7: test.Arrays
	(*Maps)(nil),                   // 8: test.Maps
	(*TestMessage)(nil),            // 9: test.TestMessage
	(*FailRequest)(nil),            // 10: test.FailRequest
	nil,                            // 11: test.Maps.StringSetEntry
	nil,                            // 12: test.Maps.Int32SetEntry
	nil,                            // 13: test.Maps.Int64SetEntry
	nil,                            // 14: test.Maps.Uint32SetEntry
	nil,                            // 15: test.Maps.Uint64SetEntry
	nil,                            // 16: test.Maps.Sint32SetEntry
	nil,                            // 17: test.Maps.Sint64SetEntry
	nil,                            // 18: test.Maps.Fixed32SetEntry
	nil,                            // 19: test.Maps.Fixed64SetEntry
	nil,                            // 20: test.Maps.Sfixed32SetEntry
	nil,                            // 21: test.Maps.Sfixed64SetEntry
	nil,                            // 22: test.Maps.PeopleByEmployeeNumEntry
	nil,                            // 23: test.Maps.StatesEntry
	nil,                            // 24: test.Maps.StringNamesEntry
	nil,                            // 25: test.Maps.BytesNamesEntry
	nil,                            // 26: test.Maps.BoolNamesEntry
	nil,                            // 27: test.Maps.DoubleNamesEntry
	nil,                            // 28: test.Maps.FloatNamesEntry
	(*TestMessage_Misc)(nil),       // 29: test.TestMessage.Misc
	(*timestamppb.Timestamp)(nil),  // 30: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 31: google.protobuf.Duration
	(*anypb.Any)(nil),              // 32: google.protobuf.Any
	(*structpb.Struct)(nil),        // 33: google.protobuf.Struct
	(*structpb.Value)(nil),         // 34: google.protobuf.Value
	(*structpb.ListValue)(nil),     // 35: google.protobuf.ListValue
	(*wrapperspb.BytesValue)(nil),  // 36: google.protobuf.BytesValue
	(*wrapperspb.StringValue)(nil), // 37: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),   // 38: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil), // 39: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 40: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),  // 41: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 42: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil), // 43: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 44: google.protobuf.UInt64Value
	(*emptypb.Empty)(nil),          // 45: google.protobuf.Empty
}
var file_test_proto_depIdxs = []int32{
	4,   // 0: test.Person.address:type_name -> test.Address
	3,   // 1: test.Person.parent:type_name -> test.Person
	3,   // 2: test.Person.sibling:type_name -> test.Person
	3,   // 3: test.Person.child:type_name -> test.Person
	1,   // 4: test.Person.none:type_name -> test.Void
	30,  // 5: test.WellKnowns.now:type_name -> google.protobuf.Timestamp
	30,  // 6: test.WellKnowns.past:type_name -> google.protobuf.Timestamp
	30,  // 7: test.WellKnowns.futures:type_name -> google.protobuf.Timestamp
	31,  // 8: test.WellKnowns.period:type_name -> google.protobuf.Duration
	31,  // 9: test.WellKnowns.next_interval:type_name -> google.protobuf.Duration
	31,  // 10: test.WellKnowns.history_intervals:type_name -> google.protobuf.Duration
	32,  // 11: test.WellKnowns.neat:type_name -> google.protobuf.Any
	32,  // 12: test.WellKnowns.extra:type_name -> google.protobuf.Any
	32,  // 13: test.WellKnowns.extensions:type_name -> google.protobuf.Any
	33,  // 14: test.WellKnowns.object:type_name -> google.protobuf.Struct
	33,  // 15: test.WellKnowns.optional_object:type_name -> google.protobuf.Struct
	33,  // 16: test.WellKnowns.objects:type_name -> google.protobuf.Struct
	34,  // 17: test.WellKnowns.value:type_name -> google.protobuf.Value
	34,  // 18: test.WellKnowns.optional_value:type_name -> google.protobuf.Value
	34,  // 19: test.WellKnowns.values:type_name -> google.protobuf.Value
	35,  // 20: test.WellKnowns.list:type_name -> google.protobuf.ListValue
	35,  // 21: test.WellKnowns.optional_list:type_name -> google.protobuf.ListValue
	35,  // 22: test.WellKnowns.lists:type_name -> google.protobuf.ListValue
	36,  // 23: test.WellKnowns.bytes:type_name -> google.protobuf.BytesValue
	36,  // 24: test.WellKnowns.optional_bytes:type_name -> google.protobuf.BytesValue
	36,  // 25: test.WellKnowns.list_o_bytes:type_name -> google.protobuf.BytesValue
	37,  // 26: test.WellKnowns.string:type_name -> google.protobuf.StringValue
	37,  // 27: test.WellKnowns.optional_string:type_name -> google.protobuf.StringValue
	37,  // 28: test.WellKnowns.list_o_strings:type_name -> google.protobuf.StringValue
	38,  // 29: test.WellKnowns.bool:type_name -> google.protobuf.BoolValue
	38,  // 30: test.WellKnowns.optional_bool:type_name -> google.protobuf.BoolValue
	38,  // 31: test.WellKnowns.list_o_bools:type_name -> google.protobuf.BoolValue
	39,  // 32: test.WellKnowns.double:type_name -> google.protobuf.DoubleValue
	39,  // 33: test.WellKnowns.optional_double:type_name -> google.protobuf.DoubleValue
	39,  // 34: test.WellKnowns.list_o_doubles:type_name -> google.protobuf.DoubleValue
	40,  // 35: test.WellKnowns.float:type_name -> google.protobuf.FloatValue
	40,  // 36: test.WellKnowns.optional_float:type_name -> google.protobuf.FloatValue
	40,  // 37: test.WellKnowns.list_o_floats:type_name -> google.protobuf.FloatValue
	41,  // 38: test.WellKnowns.small_int:type_name -> google.protobuf.Int32Value
	41,  // 39: test.WellKnowns.optional_small_int:type_name -> google.protobuf.Int32Value
	41,  // 40: test.WellKnowns.list_o_small_ints:type_name -> google.protobuf.Int32Value
	42,  // 41: test.WellKnowns.big_int:type_name -> google.protobuf.Int64Value
	42,  // 42: test.WellKnowns.optional_big_int:type_name -> google.protobuf.Int64Value
	42,  // 43: test.WellKnowns.list_o_big_ints:type_name -> google.protobuf.Int64Value
	43,  // 44: test.WellKnowns.small_id:type_name -> google.protobuf.UInt32Value
	43,  // 45: test.WellKnowns.optional_small_id:type_name -> google.protobuf.UInt32Value
	43,  // 46: test.WellKnowns.list_o_small_ids:type_name -> google.protobuf.UInt32Value
	44,  // 47: test.WellKnowns.big_id:type_name -> google.protobuf.UInt64Value
	44,  // 48: test.WellKnowns.optional_big_id:type_name -> google.protobuf.UInt64Value
	44,  // 49: test.WellKnowns.list_o_big_ids:type_name -> google.protobuf.UInt64Value
	3,   // 50: test.Arrays.relatives:type_name -> test.Person
	0,   // 51: test.Arrays.other_states:type_name -> test.State
	11,  // 52: test.Maps.string_set:type_name -> test.Maps.StringSetEntry
	12,  // 53: test.Maps.int32_set:type_name -> test.Maps.Int32SetEntry
	13,  // 54: test.Maps.int64_set:type_name -> test.Maps.Int64SetEntry
	14,  // 55: test.Maps.uint32_set:type_name -> test.Maps.Uint32SetEntry
	15,  // 56: test.Maps.uint64_set:type_name -> test.Maps.Uint64SetEntry
	16,  // 57: test.Maps.sint32_set:type_name -> test.Maps.Sint32SetEntry
	17,  // 58: test.Maps.sint64_set:type_name -> test.Maps.Sint64SetEntry
	18,  // 59: test.Maps.fixed32_set:type_name -> test.Maps.Fixed32SetEntry
	19,  // 60: test.Maps.fixed64_set:type_name -> test.Maps.Fixed64SetEntry
	20,  // 61: test.Maps.sfixed32_set:type_name -> test.Maps.Sfixed32SetEntry
	21,  // 62: test.Maps.sfixed64_set:type_name -> test.Maps.Sfixed64SetEntry
	22,  // 63: test.Maps.people_by_employee_num:type_name -> test.Maps.PeopleByEmployeeNumEntry
	23,  // 64: test.Maps.states:type_name -> test.Maps.StatesEntry
	24,  // 65: test.Maps.string_names:type_name -> test.Maps.StringNamesEntry
	25,  // 66: test.Maps.bytes_names:type_name -> test.Maps.BytesNamesEntry
	26,  // 67: test.Maps.bool_names:type_name -> test.Maps.BoolNamesEntry
	27,  // 68: test.Maps.double_names:type_name -> test.Maps.DoubleNamesEntry
	28,  // 69: test.Maps.float_names:type_name -> test.Maps.FloatNamesEntry
	9,   // 70: test.TestMessage.recurse:type_name -> test.TestMessage
	9,   // 71: test.TestMessage.repeated_recurse:type_name -> test.TestMessage
	3,   // 72: test.TestMessage.person:type_name -> test.Person
	0,   // 73: test.TestMessage.state:type_name -> test.State
	6,   // 74: test.TestMessage.numbers:type_name -> test.NumbersNumbersNumbers
	0,   // 75: test.TestMessage.next_state:type_name -> test.State
	5,   // 76: test.TestMessage.wk:type_name -> test.WellKnowns
	7,   // 77: test.TestMessage.arrays:type_name -> test.Arrays
	8,   // 78: test.TestMessage.maps:type_name -> test.Maps
	29,  // 79: test.TestMessage.misc:type_name -> test.TestMessage.Misc
	2,   // 80: test.FailRequest.code:type_name -> test.RpcStatusCode
	32,  // 81: test.FailRequest.details:type_name -> google.protobuf.Any
	1,   // 82: test.Maps.StringSetEntry.value:type_name -> test.Void
	1,   // 83: test.Maps.Int32SetEntry.value:type_name -> test.Void
	1,   // 84: test.Maps.Int64SetEntry.value:type_name -> test.Void
	1,   // 85: test.Maps.Uint32SetEntry.value:type_name -> test.Void
	1,   // 86: test.Maps.Uint64SetEntry.value:type_name -> test.Void
	1,   // 87: test.Maps.Sint32SetEntry.value:type_name -> test.Void
	1,   // 88: test.Maps.Sint64SetEntry.value:type_name -> test.Void
	45,  // 89: test.Maps.Fixed32SetEntry.value:type_name -> google.protobuf.Empty
	45,  // 90: test.Maps.Fixed64SetEntry.value:type_name -> google.protobuf.Empty
	45,  // 91: test.Maps.Sfixed32SetEntry.value:type_name -> google.protobuf.Empty
	45,  // 92: test.Maps.Sfixed64SetEntry.value:type_name -> google.protobuf.Empty
	3,   // 93: test.Maps.PeopleByEmployeeNumEntry.value:type_name -> test.Person
	0,   // 94: test.Maps.StatesEntry.value:type_name -> test.State
	45,  // 95: test.KitchenSink.Ping:input_type -> google.protobuf.Empty
	9,   // 96: test.KitchenSink.Exchange:input_type -> test.TestMessage
	9,   // 97: test.KitchenSink.UploadMany:input_type -> test.TestMessage
	9,   // 98: test.KitchenSink.DownloadMany:input_type -> test.TestMessage
	9,   // 99: test.KitchenSink.DoManyThings:input_type -> test.TestMessage
	10,  // 100: test.KitchenSink.Fail:input_type -> test.FailRequest
	30,  // 101: test.KitchenSink.SendTimestamp:input_type -> google.protobuf.Timestamp
	31,  // 102: test.KitchenSink.SendDuration:input_type -> google.protobuf.Duration
	32,  // 103: test.KitchenSink.SendAny:input_type -> google.protobuf.Any
	33,  // 104: test.KitchenSink.SendStruct:input_type -> google.protobuf.Struct
	34,  // 105: test.KitchenSink.SendValue:input_type -> google.protobuf.Value
	35,  // 106: test.KitchenSink.SendListValue:input_type -> google.protobuf.ListValue
	36,  // 107: test.KitchenSink.SendBytes:input_type -> google.protobuf.BytesValue
	37,  // 108: test.KitchenSink.SendString:input_type -> google.protobuf.StringValue
	38,  // 109: test.KitchenSink.SendBool:input_type -> google.protobuf.BoolValue
	39,  // 110: test.KitchenSink.SendDouble:input_type -> google.protobuf.DoubleValue
	40,  // 111: test.KitchenSink.SendFloat:input_type -> google.protobuf.FloatValue
	41,  // 112: test.KitchenSink.SendInt32:input_type -> google.protobuf.Int32Value
	42,  // 113: test.KitchenSink.SendInt64:input_type -> google.protobuf.Int64Value
	43,  // 114: test.KitchenSink.SendUInt32:input_type -> google.protobuf.UInt32Value
	44,  // 115: test.KitchenSink.SendUInt64:input_type -> google.protobuf.UInt64Value
	30,  // 116: test.KitchenSink.SendMultipleTimestamp:input_type -> google.protobuf.Timestamp
	31,  // 117: test.KitchenSink.SendMultipleDuration:input_type -> google.protobuf.Duration
	32,  // 118: test.KitchenSink.SendMultipleAny:input_type -> google.protobuf.Any
	33,  // 119: test.KitchenSink.SendMultipleStruct:input_type -> google.protobuf.Struct
	34,  // 120: test.KitchenSink.SendMultipleValue:input_type -> google.protobuf.Value
	35,  // 121: test.KitchenSink.SendMultipleListValue:input_type -> google.protobuf.ListValue
	36,  // 122: test.KitchenSink.SendMultipleBytes:input_type -> google.protobuf.BytesValue
	37,  // 123: test.KitchenSink.SendMultipleString:input_type -> google.protobuf.StringValue
	38,  // 124: test.KitchenSink.SendMultipleBool:input_type -> google.protobuf.BoolValue
	39,  // 125: test.KitchenSink.SendMultipleDouble:input_type -> google.protobuf.DoubleValue
	40,  // 126: test.KitchenSink.SendMultipleFloat:input_type -> google.protobuf.FloatValue
	41,  // 127: test.KitchenSink.SendMultipleInt32:input_type -> google.protobuf.Int32Value
	42,  // 128: test.KitchenSink.SendMultipleInt64:input_type -> google.protobuf.Int64Value
	43,  // 129: test.KitchenSink.SendMultipleUInt32:input_type -> google.protobuf.UInt32Value
	44,  // 130: test.KitchenSink.SendMultipleUInt64:input_type -> google.protobuf.UInt64Value
	45,  // 131: test.KitchenSink.Ping:output_type -> google.protobuf.Empty
	9,   // 132: test.KitchenSink.Exchange:output_type -> test.TestMessage
	9,   // 133: test.KitchenSink.UploadMany:output_type -> test.TestMessage
	9,   // 134: test.KitchenSink.DownloadMany:output_type -> test.TestMessage
	9,   // 135: test.KitchenSink.DoManyThings:output_type -> test.TestMessage
	9,   // 136: test.KitchenSink.Fail:output_type -> test.TestMessage
	45,  // 137: test.KitchenSink.SendTimestamp:output_type -> google.protobuf.Empty
	45,  // 138: test.KitchenSink.SendDuration:output_type -> google.protobuf.Empty
	45,  // 139: test.KitchenSink.SendAny:output_type -> google.protobuf.Empty
	45,  // 140: test.KitchenSink.SendStruct:output_type -> google.protobuf.Empty
	45,  // 141: test.KitchenSink.SendValue:output_type -> google.protobuf.Empty
	45,  // 142: test.KitchenSink.SendListValue:output_type -> google.protobuf.Empty
	45,  // 143: test.KitchenSink.SendBytes:output_type -> google.protobuf.Empty
	45,  // 144: test.KitchenSink.SendString:output_type -> google.protobuf.Empty
	45,  // 145: test.KitchenSink.SendBool:output_type -> google.protobuf.Empty
	45,  // 146: test.KitchenSink.SendDouble:output_type -> google.protobuf.Empty
	45,  // 147: test.KitchenSink.SendFloat:output_type -> google.protobuf.Empty
	45,  // 148: test.KitchenSink.SendInt32:output_type -> google.protobuf.Empty
	45,  // 149: test.KitchenSink.SendInt64:output_type -> google.protobuf.Empty
	45,  // 150: test.KitchenSink.SendUInt32:output_type -> google.protobuf.Empty
	45,  // 151: test.KitchenSink.SendUInt64:output_type -> google.protobuf.Empty
	45,  // 152: test.KitchenSink.SendMultipleTimestamp:output_type -> google.protobuf.Empty
	45,  // 153: test.KitchenSink.SendMultipleDuration:output_type -> google.protobuf.Empty
	45,  // 154: test.KitchenSink.SendMultipleAny:output_type -> google.protobuf.Empty
	45,  // 155: test.KitchenSink.SendMultipleStruct:output_type -> google.protobuf.Empty
	45,  // 156: test.KitchenSink.SendMultipleValue:output_type -> google.protobuf.Empty
	45,  // 157: test.KitchenSink.SendMultipleListValue:output_type -> google.protobuf.Empty
	45,  // 158: test.KitchenSink.SendMultipleBytes:output_type -> google.protobuf.Empty
	45,  // 159: test.KitchenSink.SendMultipleString:output_type -> google.protobuf.Empty
	45,  // 160: test.KitchenSink.SendMultipleBool:output_type -> google.protobuf.Empty
	45,  // 161: test.KitchenSink.SendMultipleDouble:output_type -> google.protobuf.Empty
	45,  // 162: test.KitchenSink.SendMultipleFloat:output_type -> google.protobuf.Empty
	45,  // 163: test.KitchenSink.SendMultipleInt32:output_type -> google.protobuf.Empty
	45,  // 164: test.KitchenSink.SendMultipleInt64:output_type -> google.protobuf.Empty
	45,  // 165: test.KitchenSink.SendMultipleUInt32:output_type -> google.protobuf.Empty
	45,  // 166: test.KitchenSink.SendMultipleUInt64:output_type -> google.protobuf.Empty
	131, // [131:167] is the sub-list for method output_type
	95,  // [95:131] is the sub-list for method input_type
	95,  // [95:95] is the sub-list for extension type_name
	95,  // [95:95] is the sub-list for extension extendee
	0,   // [0:95] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnowns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumbersNumbersNumbers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Arrays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Maps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage_Misc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Person_Parent)(nil),
		(*Person_Sibling)(nil),
		(*Person_Child)(nil),
		(*Person_None)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
